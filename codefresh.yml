version: '1.0'
steps:
  BuildingDockerImage:
    title: Building Docker Image
    type: build
    image_name: freshkeep/helloworldredisecsdemo
    working_directory: ./
    dockerfile: Dockerfile
  RunningUnitTests:
    title: Running Unit Tests
    type: composition
    composition: 58a172346f0280010038a3c8
    composition_candidates:
      HelloWorldRedisECSDemo:
        image: '${{BuildingDockerImage}}'
        entrypoint: sh /codefresh/volume/cf-generated/unit_test_script
        volumes:
          - '${{CF_VOLUME}}:/codefresh/volume'
    add_flow_volume_to_composition: true
    create_file:
      path: /codefresh/volume/cf-generated
      name: unit_test_script
      content: |-
        npm install -g mocha --silent
        npm install -g mocha-co --silent
        mocha tests
    on_success:
      metadata:
        set:
          - '${{BuildingDockerImage.imageId}}':
              - CF_QUALITY: true
    on_fail:
      metadata:
        set:
          - '${{BuildingDockerImage.imageId}}':
              - CF_QUALITY: false
  PushingBranchToDockerRegistry:
    title: Pushing branch image to Docker Registry
    type: push
    candidate: '${{BuildingDockerImage}}'
    tag: '${{CF_BRANCH}}'
    when:
      branch:
        ignore:
          - master
  PushingVersionedMasterToDockerRegistry:
    title: Pushing master image to Docker Registry with commit hash as tag
    type: push
    candidate: '${{BuildingDockerImage}}'
    tag: '${{CF_SHORT_REVISION}}'
    when:
      branch:
        only:
          - master
  PushingLatestMasterToDockerRegistry:
    title: Pushing master image to Docker Registry with latest tag
    type: push
    candidate: '${{BuildingDockerImage}}'
    tag: latest
    when:
      branch:
        only:
          - master
  DeployToEcs:
    title: Deploying to ECS
    image: codefresh/cf-deploy-ecs
    commands:
      - cfecs-update us-east-1 cluster-fuck-2 HelloWorldRedisService -i freshkeep/helloworldredisecsdemo -t '${{CF_SHORT_REVISION}}'
    environment:
      - AWS_ACCESS_KEY_ID=${{AWS_ACCESS_KEY_ID}}
      - AWS_SECRET_ACCESS_KEY=${{AWS_SECRET_ACCESS_KEY}}

    when:
      branch:
        only:
          - master
